<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Road Design Tool</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        .input-group {
            margin-bottom: 15px;
        }
        .input-group label {
            display: block;
            margin-bottom: 5px;
        }
        .input-group input {
            width: 100%;
            padding: 8px;
            box-sizing: border-box;
        }
        .output {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            background-color: #f9f9f9;
        }
        .details {
            font-size: 0.9em;
            color: #555;
        }
    </style>
    <script src="https://d3js.org/d3.v7.min.js"></script>
</head>
<body>

<div class="container">
    <h1>Road Design Tool</h1>
    <form id="roadDesignForm">
        <div class="input-group">
            <label for="designSpeed">Design Speed (km/h) <small>(Default: 80)</small></label>
            <input type="number" id="designSpeed" name="designSpeed" placeholder="Enter design speed">
        </div>
        <div class="input-group">
            <label for="reactionTime">Reaction Time (s) <small>(Default: 2.5)</small></label>
            <input type="number" id="reactionTime" name="reactionTime" placeholder="Enter reaction time">
        </div>
        <div class="input-group">
            <label for="frictionCoefficient">Friction Coefficient <small>(Default: 0.35)</small></label>
            <input type="number" id="frictionCoefficient" name="frictionCoefficient" step="0.01" placeholder="Enter friction coefficient">
        </div>
        <div class="input-group">
            <label for="curveRadius">Horizontal Curve Radius (m) <small>(Default: 300)</small></label>
            <input type="number" id="curveRadius" name="curveRadius" placeholder="Enter curve radius">
        </div>
        <div class="input-group">
            <label for="roadWidth">Road Width (m) <small>(Default: 7.5)</small></label>
            <input type="number" id="roadWidth" name="roadWidth" placeholder="Enter road width">
        </div>
        <div class="input-group">
            <label for="shoulderWidth">Shoulder Width (m) <small>(Default: 1.5)</small></label>
            <input type="number" id="shoulderWidth" name="shoulderWidth" placeholder="Enter shoulder width">
        </div>
        <div class="input-group">
            <label for="camber">Camber (%) <small>(Default: 2.5)</small></label>
            <input type="number" id="camber" name="camber" step="0.1" placeholder="Enter camber">
        </div>
        <button type="button" onclick="calculateDesign()">Calculate</button>
    </form>

    <div class="output" id="output">
        <h2>Design Summary</h2>
        <div id="summary"></div>
        <h3>Calculations</h3>
        <div id="calculations"></div>
        <h3>Design Drawing</h3>
        <div id="drawing"></div>
    </div>
</div>

<script>
function calculateDesign() {
    const designSpeed = parseFloat(document.getElementById('designSpeed').value) || 80;
    const reactionTime = parseFloat(document.getElementById('reactionTime').value) || 2.5;
    const frictionCoefficient = parseFloat(document.getElementById('frictionCoefficient').value) || 0.35;
    const curveRadius = parseFloat(document.getElementById('curveRadius').value) || 300;
    const roadWidth = parseFloat(document.getElementById('roadWidth').value) || 7.5;
    const shoulderWidth = parseFloat(document.getElementById('shoulderWidth').value) || 1.5;
    const camber = parseFloat(document.getElementById('camber').value) || 2.5;

    // Calculations for SSD
    const g = 9.81; // acceleration due to gravity in m/s^2
    const designSpeedMps = designSpeed * 1000 / 3600; // convert speed to m/s

    // SSD formula: SSD = vt + v^2 / (2gf)
    const ssd = (designSpeedMps * reactionTime) + (Math.pow(designSpeedMps, 2) / (2 * frictionCoefficient * g));

    // Calculations for Horizontal Curve
    const e = Math.min(0.07, (Math.pow(designSpeedMps, 2) / (127 * curveRadius)));

    // Generate summary and detailed steps
    const summaryHtml = `
        <p><strong>Design Speed:</strong> ${designSpeed} km/h</p>
        <p><strong>Stopping Sight Distance (SSD):</strong> ${ssd.toFixed(2)} meters</p>
        <p><strong>Horizontal Curve Radius:</strong> ${curveRadius} meters</p>
        <p><strong>Super-elevation:</strong> ${e.toFixed(4)} (unitless)</p>
        <p><strong>Road Width:</strong> ${roadWidth} meters</p>
        <p><strong>Shoulder Width:</strong> ${shoulderWidth} meters</p>
        <p><strong>Camber:</strong> ${camber} %</p>
    `;

    const calculationsHtml = `
        <h4>Stopping Sight Distance (SSD)</h4>
        <p>Design Speed: ${designSpeed} km/h = ${designSpeedMps.toFixed(2)} m/s</p>
        <p>Reaction Time: ${reactionTime} seconds</p>
        <p>Friction Coefficient: ${frictionCoefficient}</p>
        <p>Acceleration due to Gravity: ${g} m/s²</p>
        <p>SSD = (Design Speed × Reaction Time) + (Design Speed² / (2 × Friction Coefficient × Gravity))</p>
        <p>SSD = (${designSpeedMps.toFixed(2)} × ${reactionTime}) + (${designSpeedMps.toFixed(2)}² / (2 × ${frictionCoefficient} × ${g}))</p>
        <p>SSD = ${ssd.toFixed(2)} meters</p>
        
        <h4>Horizontal Curve Super-elevation</h4>
        <p>Super-elevation (e) = Min(0.07, (Design Speed² / (127 × Curve Radius)))</p>
        <p>e = Min(0.07, (${designSpeedMps.toFixed(2)}² / (127 × ${curveRadius}))</p>
        <p>e = ${e.toFixed(4)} (unitless)</p>
    `;

    document.getElementById('summary').innerHTML = summaryHtml;
    document.getElementById('calculations').innerHTML = calculationsHtml;

    // Draw road cross-section using D3.js
    drawRoadDesign(roadWidth, shoulderWidth, camber);
}

function drawRoadDesign(roadWidth, shoulderWidth, camber) {
    const width = 800;
    const height = 400;

    d3.select("#drawing").html(""); // Clear previous drawing

    const svg = d3.select("#drawing")
        .append("svg")
        .attr("width", width)
        .attr("height", height);

    const roadGroup = svg.append("g")
        .attr("transform", `translate(${width / 2}, ${height / 2})`);

    // Draw road
    roadGroup.append("rect")
        .attr("x", -roadWidth * 10 / 2)
        .attr("y", -20)
        .attr("width", roadWidth * 10)
        .attr("height", 40)
        .attr("fill", "gray");

    // Draw shoulders
    roadGroup.append("rect")
        .attr("x", -roadWidth * 10 / 2 - shoulderWidth * 10)
        .attr("y", -20)
        .attr("width", shoulderWidth * 10)
        .attr("height", 40)
        .attr("fill", "lightgray");

    roadGroup.append("rect")
        .attr("x", roadWidth * 10 / 2)
        .attr("y", -20)
        .attr("width", shoulderWidth * 10)
        .attr("height", 40)
        .attr("fill", "lightgray");

    // Draw camber
    roadGroup.append("line")
        .attr("x1", -roadWidth * 10 / 2)
        .attr("y1", 0)
        .attr("x2", roadWidth * 10 / 2)
        .attr("y2", 0)
        .attr("stroke", "black")
        .attr("stroke-width", 2);

    roadGroup.append("line")
        .attr("x1", -roadWidth * 10 / 2)
        .attr("y1", 0)
        .attr("x2", -roadWidth * 10 / 2 + roadWidth * 10 / 2)
        .attr("y2", -camber * 10)
        .attr("stroke", "black")
        .attr("stroke-width", 2);

    roadGroup.append("line")
        .attr("x1", roadWidth * 10 / 2)
        .attr("y1", 0)
        .attr("x2", roadWidth * 10 / 2 - roadWidth * 10 / 2)
        .attr("y2", -camber * 10)
        .attr("stroke", "black")
        .attr("stroke-width", 2);
}
</script>

</body>
</html>
